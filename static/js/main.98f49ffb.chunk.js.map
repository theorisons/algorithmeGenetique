{"version":3,"sources":["population/utilities.js","Params.js","population/individual.js","population/population.js","population/algorithme.js","Command.js","App.js","serviceWorker.js","index.js"],"names":["LETTERS_ALLOWED","generateRandomChar","Math","floor","random","length","randomValue","max","Params","props","state","values","onSubmit","e","preventDefault","className","htmlFor","type","onChange","newState","word","newWord","i","indexOf","checkForLetters","target","value","setState","this","min","step","nbIndividuals","childrenElit","parentElit","probRandomChro","onClick","resetValues","updateValues","React","Component","Individual","chromosomes","fit","display","size","parent1","parent2","p","randomVal","Population","nbInd","sizeInd","childElit","propRandomChro","indTmp","arrayInd","initRandomly","push","nbParentsElit","nbChildrenElit","forEach","ind","evaluation","sort","a","b","tmpInd","tmpArray","indexP1","indexP2","chromosomesEvolution","Algorithm","firstStep","population","arrange","result","newIteration","evolution","initState","iteration","play","timeSimulation","Command","initAlgo","params","animation","undefined","algo","Algorithme","resultJsx","checkNewParams","addResult","stopAnimation","unshift","key","displayResult","scope","clearInterval","changeValueAnimation","setInterval","handlePlayPause","playPauseButton","message","copyright","href","rel","App","updateValuesParams","newValuesParams","resetValuesParams","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.98f49ffb.chunk.js","sourcesContent":["const LETTERS_ALLOWED =\n  \"AaàâBbCcçDdEeéèêFfGgHhIiîJjKkLlMmNnOoôPpQqRrSsTtUuûµùVvWwXxYyZz 0123456789<>&~#'-_\\\"\\\\,?;.:/!%*^§¤°$€£=+()[]@\";\n\nexport const generateRandomChar = () => {\n  return LETTERS_ALLOWED[\n    Math.floor(Math.random() * Math.floor(LETTERS_ALLOWED.length))\n  ];\n};\n\nexport const randomValue = max => {\n  // Generate a random number beetwen [0; max[\n  return Math.floor(Math.random() * Math.floor(max));\n};\n\nexport const checkForLetters = word => {\n  let newWord = \"\";\n  for (let i = 0; i < word.length; i++) {\n    if (LETTERS_ALLOWED.indexOf(word[i]) !== -1) {\n      newWord = newWord + word[i];\n    }\n  }\n  return newWord;\n};\n","import React from \"react\";\nimport { checkForLetters } from \"./population/utilities\";\n\nexport default class Params extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      ...this.props.values\n    };\n  }\n\n  render() {\n    return (\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n        }}\n      >\n        <div className=\"form-group\">\n          <label htmlFor=\"formControlRange\">Éléments à trouver</label>\n          <div className=\"row justify-content-around\">\n            <div className=\"col-8\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                onChange={e => {\n                  let newState = this.state;\n                  newState.word = checkForLetters(e.target.value);\n                  this.setState(newState);\n                }}\n                value={this.state.word}\n              />\n            </div>\n            <p className=\"col-2\">{this.state.word.length}</p>\n          </div>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"formControlRange\">Nombre d'individus</label>\n          <div className=\"row justify-content-around\">\n            <input\n              className=\"form-control-range col-8\"\n              type=\"range\"\n              min={0}\n              max={5000}\n              step={50}\n              onChange={e => {\n                let newState = this.state;\n                newState.nbIndividuals = e.target.value;\n                this.setState(newState);\n              }}\n              value={this.state.nbIndividuals}\n            />\n            <p className=\"col-2\">{this.state.nbIndividuals}</p>\n          </div>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"formControlRange\">\n            Pourcentage d'enfants générés par élilistisme\n          </label>\n          <div className=\"row justify-content-around\">\n            <input\n              className=\"form-control-range col-8\"\n              type=\"range\"\n              min={0}\n              max={100}\n              onChange={e => {\n                let newState = this.state;\n                newState.childrenElit = e.target.value;\n                this.setState(newState);\n              }}\n              value={this.state.childrenElit}\n            />\n            <p className=\"col-2\">{this.state.childrenElit}%</p>\n          </div>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"formControlRange\">\n            Pourcentage de parents retenus par élilistisme\n          </label>\n          <div className=\"row justify-content-around\">\n            <input\n              className=\"form-control-range col-8\"\n              type=\"range\"\n              min={0}\n              max={100}\n              onChange={e => {\n                let newState = this.state;\n                newState.parentElit = e.target.value;\n                this.setState(newState);\n              }}\n              value={this.state.parentElit}\n            />\n            <p className=\"col-2\">{this.state.parentElit}%</p>\n          </div>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"formControlRange\">\n            Probabalité d'obtenir un chromosome aléatoire\n          </label>\n          <div className=\"row justify-content-around\">\n            <input\n              className=\"form-control-range col-8\"\n              type=\"range\"\n              min={0}\n              max={100}\n              onChange={e => {\n                let newState = this.state;\n                newState.probRandomChro = e.target.value;\n                this.setState(newState);\n              }}\n              value={this.state.probRandomChro}\n            />\n            <p className=\"col-2\">{this.state.probRandomChro}%</p>\n          </div>\n        </div>\n\n        <div className=\"row justify-content-around\">\n          <button\n            className=\"btn btn-secondary col-4\"\n            type=\"button\"\n            onClick={() => {\n              this.setState(this.props.resetValues());\n            }}\n          >\n            Réinitialiser\n          </button>\n\n          <button\n            type=\"button\"\n            className=\"btn btn-primary col-4\"\n            onClick={() => {\n              this.props.updateValues(this.state);\n            }}\n          >\n            Changer\n          </button>\n        </div>\n      </form>\n    );\n  }\n}\n","import { generateRandomChar, randomValue } from \"./utilities\";\n\nexport default class Individual {\n  chromosomes = \"\";\n  fit = -1;\n\n  initRandomly(size) {\n    // Create chromosomes for the first time with random value\n    for (let i = 0; i < size; i++) {\n      this.chromosomes = this.chromosomes + generateRandomChar();\n    }\n  }\n\n  chromosomesEvolution(parent1, parent2, p) {\n    /*\n    Generate a new chromosomes based on \n    50 % of parent 1\n    50 % of parent 2\n    percentage p to choose randomly the value\n    */\n\n    let i = 0;\n    let randomVal;\n\n    for (; i < parent1.length / 2; i++) {\n      randomVal = randomValue(100);\n      if (randomVal < p) {\n        this.chromosomes = this.chromosomes + generateRandomChar();\n      } else {\n        this.chromosomes = this.chromosomes + parent1[i];\n      }\n    }\n\n    for (; i < parent1.length; i++) {\n      randomVal = randomValue(100);\n      if (randomVal < p) {\n        this.chromosomes = this.chromosomes + generateRandomChar();\n      } else {\n        this.chromosomes = this.chromosomes + parent2[i];\n      }\n    }\n  }\n\n  evaluation(word) {\n    // Evaluate the chromosomes to calculate it's fitness\n    this.fit = 0;\n    for (let i = 0; i < this.chromosomes.length; i++) {\n      if (word[i] !== this.chromosomes[i]) {\n        this.fit += 1;\n      }\n    }\n  }\n\n  display = () => {\n    return this.chromosomes + \" fit : \" + this.fit;\n  };\n}\n","import Individual from \"./individual\";\nimport { randomValue } from \"./utilities\";\n\nexport default class Population {\n  arrayInd = []; // Array of all the individuals in the population\n  nbParentsElit; // Number of parents choose because of their fitness\n  nbChildrenElit; // Number of children choose because of their fitness\n  propRandomChro; // Percentage of chromosome generate randomly\n\n  constructor(nbInd, sizeInd, parentElit, childElit, propRandomChro) {\n    // parentElit = Percentage of parents choose because of their fitness\n    // childElit = Percentage of children choose because of their fitness\n    // Percentage of chromosome generate randomly\n\n    let indTmp;\n\n    for (let i = 0; i < nbInd; i++) {\n      indTmp = new Individual();\n      indTmp.initRandomly(sizeInd);\n      this.arrayInd.push(indTmp);\n    }\n\n    this.nbParentsElit = Math.floor((parentElit / 100) * nbInd);\n    this.nbChildrenElit = Math.floor((childElit / 100) * nbInd);\n    this.propRandomChro = propRandomChro;\n  }\n\n  evaluation(word) {\n    this.arrayInd.forEach(ind => ind.evaluation(word));\n  }\n\n  arrange() {\n    this.arrayInd.sort((a, b) => a.fit - b.fit);\n  }\n\n  evolution() {\n    // nbChildrenElit are generated with the nbParents with the best fitness\n    // (nbInd - nbChildrenElit) are choose randomly\n    let tmpArray = [];\n    let tmpInd;\n\n    let i;\n\n    let indexP1 = 0;\n    let indexP2 = 0;\n\n    /* Generation of children based on the best fitness */\n    for (i = 0; i < this.nbChildrenElit; i++) {\n      tmpInd = new Individual();\n\n      indexP1 = randomValue(this.nbParentsElit);\n      indexP2 = randomValue(this.nbParentsElit);\n\n      tmpInd.chromosomesEvolution(\n        this.arrayInd[indexP1].chromosomes,\n        this.arrayInd[indexP2].chromosomes,\n        this.propRandomChro\n      );\n\n      tmpArray.push(tmpInd);\n    }\n\n    for (; i < this.arrayInd.length; i++) {\n      tmpInd = new Individual();\n\n      indexP1 = randomValue(this.arrayInd.length);\n      indexP2 = randomValue(this.arrayInd.length);\n\n      tmpInd.chromosomesEvolution(\n        this.arrayInd[indexP1].chromosomes,\n        this.arrayInd[indexP2].chromosomes,\n        this.propRandomChro\n      );\n\n      tmpArray.push(tmpInd);\n    }\n\n    this.arrayInd = tmpArray;\n  }\n\n  display() {\n    this.arrayInd.forEach(ind => ind.display());\n  }\n}\n","import Population from \"./population\";\n\nexport default class Algorithm {\n  population;\n  word = \"\";\n\n  constructor(nbInd, sizeInd, parentElit, childElit, propRandomChro, word) {\n    this.population = new Population(\n      nbInd,\n      sizeInd,\n      parentElit,\n      childElit,\n      propRandomChro\n    );\n    this.word = word;\n  }\n\n  firstStep = () => {\n    this.population.evaluation(this.word);\n    this.population.arrange();\n\n    return this.result();\n  };\n\n  newIteration = () => {\n    this.population.evolution();\n    this.population.evaluation(this.word);\n    this.population.arrange();\n\n    return this.result();\n  };\n\n  result = () => {\n    return {\n      chromosomes: this.population.arrayInd[0].chromosomes,\n      fit: this.population.arrayInd[0].fit\n    };\n  };\n}\n","import React from \"react\";\nimport Algorithme from \"./population/algorithme\";\n\nconst initState = {\n  iteration: 0,\n  play: false,\n  timeSimulation: 50\n};\n\nexport default class Command extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.params = undefined;\n    this.algo = undefined;\n    this.result = [];\n    this.resultJsx = [];\n    this.animation = undefined;\n\n    this.initAlgo();\n\n    this.state = initState;\n  }\n\n  componentDidUpdate() {\n    if (this.checkNewParams()) {\n      this.stopAnimation();\n      this.initAlgo();\n      this.setState({\n        ...initState,\n        timeSimulation: this.state.timeSimulation\n      });\n    }\n  }\n\n  initAlgo = () => {\n    const {\n      nbIndividuals,\n      parentElit,\n      childrenElit,\n      probRandomChro,\n      timeSimulation,\n      word\n    } = this.props.params;\n\n    this.params = this.props.params;\n    this.animation = undefined;\n\n    this.algo = new Algorithme(\n      nbIndividuals,\n      word.length,\n      parentElit,\n      childrenElit,\n      probRandomChro,\n      word\n    );\n\n    this.result = [];\n    this.resultJsx = [];\n\n    this.timeSimulation = timeSimulation;\n  };\n\n  checkNewParams = () => {\n    return this.params !== this.props.params;\n  };\n\n  step = () => {\n    let result = undefined;\n    if (this.state.iteration === 0) {\n      result = this.algo.firstStep();\n    } else {\n      result = this.algo.newIteration();\n    }\n\n    this.addResult(result);\n\n    if (result.fit === 0) {\n      this.stopAnimation();\n    }\n\n    this.setState({\n      ...this.state,\n      iteration: this.state.iteration + 1\n    });\n  };\n\n  addResult = result => {\n    this.result.unshift({\n      ...result,\n      iteration: this.state.iteration\n    });\n    this.resultJsx.unshift(\n      <tr\n        key={`${this.result[0].chromosomes}:${this.result[0].fit}:${this.result[0].iteration}`}\n      >\n        <td>{this.result[0].chromosomes}</td>\n        <td>{this.result[0].chromosomes.length - this.result[0].fit}</td>\n        <td>{this.result[0].iteration}</td>\n      </tr>\n    );\n  };\n\n  displayResult = () => {\n    if (this.state.iteration !== 0) {\n      return (\n        <table className=\"table\">\n          <thead>\n            <tr>\n              <th scope=\"col\">Mot</th>\n              <th scope=\"col\">Adaptation</th>\n              <th scope=\"col\">Itération</th>\n            </tr>\n          </thead>\n          <tbody>{this.resultJsx}</tbody>\n        </table>\n      );\n    }\n  };\n\n  stopAnimation = () => {\n    if (this.animation !== undefined) {\n      clearInterval(this.animation);\n      this.animation = undefined;\n    }\n  };\n\n  changeValueAnimation = () => {\n    if (this.animation !== undefined) {\n      this.stopAnimation();\n      this.animation = setInterval(this.step, this.state.timeSimulation);\n    }\n  };\n\n  handlePlayPause = () => {\n    if (this.animation === undefined) {\n      this.animation = setInterval(this.step, this.state.timeSimulation);\n    } else {\n      this.stopAnimation();\n    }\n    this.setState({\n      ...this.state,\n      play: !this.state.play\n    });\n  };\n\n  playPauseButton = () => {\n    let message = \"Play\";\n    if (this.animation !== undefined) {\n      message = \"Pause\";\n    }\n    return (\n      <button\n        type=\"button\"\n        className=\"btn btn-primary col-3\"\n        onClick={() => this.handlePlayPause()}\n      >\n        {message}\n      </button>\n    );\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"form-group\">\n          <label htmlFor=\"formControlRange\">\n            Durée entre chaque génération\n          </label>\n          <div className=\"row justify-content-around\">\n            <input\n              className=\"form-control-range col-8\"\n              type=\"range\"\n              min={50}\n              max={5000}\n              step={50}\n              onChange={e => {\n                let newState = this.state;\n                newState.timeSimulation = e.target.value;\n                this.setState(newState, this.changeValueAnimation);\n              }}\n              value={this.state.timeSimulation}\n            />\n            <p className=\"col-2\">{this.state.timeSimulation / 1000}s</p>\n          </div>\n        </div>\n        <div className=\"row justify-content-around\">\n          <button\n            type=\"button\"\n            className=\"btn btn-primary col-3\"\n            onClick={() => {\n              this.stopAnimation();\n              this.initAlgo();\n              this.setState({\n                ...initState,\n                timeSimulation: this.state.timeSimulation\n              });\n            }}\n          >\n            Reset\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn-primary col-3\"\n            onClick={() => {\n              this.stopAnimation();\n              this.step();\n            }}\n          >\n            Step\n          </button>\n          {this.playPauseButton()}\n        </div>\n        {this.displayResult()}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport Params from \"./Params\";\nimport Command from \"./Command\";\n\nconst initState = {\n  params: {\n    nbIndividuals: 1000,\n    childrenElit: 90,\n    parentElit: 30,\n    probRandomChro: 5,\n    word: \"Abonne-toi\"\n  }\n};\n\nconst copyright = () => {\n  return (\n    <div>\n      <a\n        href={\"https://github.com/theorisons/algorithmeGenetique\"}\n        rel=\"noopener noreferrer\"\n        target=\"_blank\"\n      >\n        Repository Github\n      </a>\n      <br />\n      <a\n        href={\"https://www.youtube.com/theorisons/?sub_confirmation=1\"}\n        rel=\"noopener noreferrer\"\n        target=\"_blank\"\n      >\n        Copyright © Oct 2019 Théorisons\n      </a>\n    </div>\n  );\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ...initState\n    };\n  }\n\n  updateValuesParams = newValuesParams => {\n    let newState = this.state;\n    newState.params = newValuesParams;\n\n    this.setState(newState);\n  };\n\n  resetValuesParams = () => {\n    return initState.params;\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <header>\n          <h1 className=\"text-center\">Algorithme Génétique</h1>\n\n          <div className=\"text-right p-2 d-block d-sm-none\">{copyright()}</div>\n          {/* COPYRIGHT DISPLAY SMALL SCREEN ON TOP */}\n\n          <div className=\"text-right p-2 fixed-bottom d-sm-block d-none\">\n            {copyright()}\n          </div>\n          {/* COPYRIGHT LARGE SCREEN ON THE BOTTOM */}\n        </header>\n\n        <hr className=\"p-1\" />\n\n        <div className=\"row no-gutters\">\n          <div className=\"col-sm-6 p-2\">\n            <h3 className=\"text-center\">Panneau d'affichage</h3>\n            <Command params={this.state.params} />\n          </div>\n\n          <div className=\"col-sm-6 p-2\">\n            <h3 className=\"text-center\">Panneau de commande</h3>\n            <Params\n              values={this.state.params}\n              updateValues={this.updateValuesParams}\n              resetValues={this.resetValuesParams}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}